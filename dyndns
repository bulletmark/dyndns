#!venv/bin/python -u
'Update external IP address to a dynamic DNS server.'

# Mark Blakeney, Nov 2016.

import sys
import time
import argparse
from datetime import datetime
from pathlib import Path

import convtime

from ruamel.yaml import YAML
import requests

PROGNAME = Path(sys.argv[0]).name

LASTIP = Path.home() / '.cache' / (PROGNAME + '.cache')
CNFFILE = Path.home() / '.config' / (PROGNAME + '.conf')

# Process command line options
opt = argparse.ArgumentParser(description=__doc__.strip(),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
opt.add_argument('-d', '--debug', action='store_true',
        help='output debug messages')
opt.add_argument('-v', '--verbose', action='store_true',
        help='output server responses')
args = opt.parse_args()

# Get configuration values
conf = YAML(typ='safe').load(CNFFILE)

poll_period = int(convtime.tosec(conf.get('poll_period', '5m')))
retry_period = int(convtime.tosec(conf.get('retry_period', '30s')))
force_period = int(convtime.tosec(conf.get('force_period', '2h')))

ip_servers = conf['ip_servers']
update_url = conf['update_url']

LASTIP.parent.mkdir(parents=True, exist_ok=True)

if LASTIP.exists():
    line = LASTIP.read_text().strip()
    try:
        lastip, lasturl = line.split(maxsplit=1)
    except Exception:
        LASTIP.unlink()
        lastip = None
    else:
        last_poll = LASTIP.stat().st_mtime
else:
    lastip = None

if not lastip:
    lastip = lasturl = 'unknown'
    last_poll = time.time()

next_poll = last_poll + force_period

ds = str(datetime.fromtimestamp(last_poll))[:19]
print(f'Last IP for {lastip} is {lasturl} at {ds}')

def urlget(url):
    'Return reply from given URL'
    try:
        r = requests.get(url, timeout=20)
        r.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f'{url} error {str(e)}', file=sys.stderr)
        return None

    resp = r.text
    resp = resp.strip() if resp else None

    if not resp:
        print(f'{url} returned no data', file=sys.stderr)
        return None

    return resp

is_up = None
while True:

    # Get our external IP address from one of the online servers
    ip = None
    for url in ip_servers:
        ip = urlget(url)
        if ip:
            if args.debug or not is_up:
                print(f'Got IP address {ip} from {url}')
            break

    if ip:
        is_up = True
        now = time.time()

        if lastip != ip or lasturl != update_url:
            if lastip != ip:
                print(f'IP address changed from {lastip} to {ip}')
            if lasturl != update_url:
                print(f'URL changed from {lasturl} to {update_url}')
            LASTIP.write_text(f'{ip} {update_url}')
            lastip = ip
            lasturl = update_url
        elif now >= next_poll:
            if args.verbose:
                print(f'IP address force set to {ip}')
        else:
            ip = None

        if ip:
            res = urlget(update_url)

            if args.verbose:
                print(f"DNS server reply is {res if res else '<none>'}")

            next_poll = now + force_period

        period = poll_period
    else:
        if is_up:
            is_up = False
            ips = ' or '.join(ip_servers)
            print(f'Could not get IP address from {ips}', file=sys.stderr)
        period = retry_period

    time.sleep(period)
